(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
     '("melpa" . "http://melpa.milkbox.net/packages/"))

(add-to-list 'package-archives
     '("gnu" . "http://elpa.gnu.org/packages/"))

(package-initialize)

(setq url-http-attempt-keepalives nil)

(defvar my-packages
  '(grizzl ac-nrepl ag auto-complete flx-ido flx fuzzy geiser haskell-mode
           highlight idomenu magit markdown-mode mic-paren multi-term nrepl
           clojure-mode pandoc-mode paredit popup projectile rainbow-delimiters
           rainbow-mode rect-mark rinari jump inflections findr robe
           ruby-compilation inf-ruby rvm s smartparens dash undo-tree)
  
  "A list of packages to ensure are installed at launch.")

(mapc
 (lambda (package)
   (or (package-installed-p package)
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package))))
 my-packages)

(provide 'my-packages)

;;utf-8 mode default
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;;whitespace and 80 line highlight
 (require 'whitespace)
 (setq whitespace-style '(face empty tabs lines-tail trailing))
 (global-whitespace-mode t)

;;rect-mark (rectangular selection)
(require 'rect-mark)
(global-set-key (kbd "C-x r C-SPC") 'rm-set-mark)
(global-set-key (kbd "C-w")
                '(lambda(b e) (interactive "r")
                   (if rm-mark-active
                       (rm-kill-region b e) (kill-region b e))))
(global-set-key (kbd "M-w")
                '(lambda(b e) (interactive "r")
                   (if rm-mark-active
                       (rm-kill-ring-save b e) (kill-ring-save b e))))
(global-set-key (kbd "C-x C-x")
                '(lambda(&optional p) (interactive "p")
                   (if rm-mark-active
                       (rm-exchange-point-and-mark p) (exchange-point-and-mark p))))


;; Clojure Stuff
(add-hook 'nrepl-interaction-mode-hook
  'nrepl-turn-on-eldoc-mode)
(require 'mic-paren)
(paren-activate)

;; Chuck stuff
(require 'chuck-mode)

;; Highlight expression on eval
(require 'easymenu)
(require 'nrepl-eval-sexp-fu)
(require 'highlight)
(turn-on-nrepl-eval-sexp-fu-flash-mode)
(setq nrepl-eval-sexp-fu-flash-duration 0.5)

(require 'rainbow-delimiters)
(require 'smartparens-config)

(smartparens-global-mode)
(load-file "~/.emacs.d/conf/general-conf.el")
(load-file "~/.emacs.d/conf/appearance-conf.el")
(load-file "~/.emacs.d/conf/auto-complete-conf.el")
(load-file "~/.emacs.d/conf/nrepl-conf.el")
(load-file "~/.emacs.d/conf/paredit-conf.el")
(load-file "~/.emacs.d/conf/clojure-conf.el")
(load-file "~/.emacs.d/conf/ruby-conf.el")


;;bindings
(load-file "~/.emacs.d/lib/bindings.el")

(show-smartparens-global-mode t)
(sp-with-modes '(rhtml-mode)
  (sp-local-pair "<" ">")
  (sp-local-pair "<%" "%>"))
;;auto-generated by package
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#3A3A3A" "#CC9393" "#7F9F7F" "#F0DFAF" "#8CD0D3" "#DC8CC3" "#93E0E3" "#DCDCCC"])
 '(custom-safe-themes (quote ("541b58826d3d7abe525a8a4c88046e0a4c81a753b1b94ce4a1020e5f2eef15a2" default)))
 '(fci-rule-color "#383838")
 '(vc-annotate-background "#2B2B2B")
 '(vc-annotate-color-map (quote ((20 . "#BC8383") (40 . "#CC9393") (60 . "#DFAF8F") (80 . "#D0BF8F") (100 . "#E0CF9F") (120 . "#F0DFAF") (140 . "#7F9F7F") (160 . "#7F9F7F") (180 . "#8FB28F") (200 . "#9FC59F") (220 . "#AFD8AF") (240 . "#BFEBBF") (260 . "#93E0E3") (280 . "#6CA0A3") (300 . "#7CB8BB") (320 . "#8CD0D3") (340 . "#94BFF3") (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color "#DC8CC3"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;ansi-term (with thanks to
;;http://www.enigmacurry.com/2008/12/26/emacs-ansi-term-tricks/)
(require 'term)
(defun visit-ansi-term ()
  "If the current buffer is:
     1) a running ansi-term named *ansi-term*, rename it.
     2) a stopped ansi-term, kill it and create a new one.
     3) a non ansi-term, go to an already running ansi-term
        or start a new one while killing a defunt one"
  (interactive)
  (let ((is-term (string= "term-mode" major-mode))
        (is-running (term-check-proc (buffer-name)))
        (term-cmd "/bin/bash")
        (anon-term (get-buffer "*ansi-term*")))
    (if is-term
        (if is-running
            (if (string= "*ansi-term*" (buffer-name))
                (call-interactively 'rename-buffer)
              (if anon-term
                  (switch-to-buffer "*ansi-term*")
                (ansi-term term-cmd)))
          (kill-buffer (buffer-name))
          (ansi-term term-cmd))
      (if anon-term
          (if (term-check-proc "*ansi-term*")
              (switch-to-buffer "*ansi-term*")
            (kill-buffer "*ansi-term*")
            (ansi-term term-cmd))
        (ansi-term term-cmd)))))
(global-set-key (kbd "<f2>") 'visit-ansi-term)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;;Multi-term
(setq multi-term-program-swithes "--login")
